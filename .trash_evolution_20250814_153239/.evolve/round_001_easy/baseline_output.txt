FFF.                                                                     [100%]
=================================== FAILURES ===================================
______________________________ test_a_star_basic _______________________________

    @pytest.mark.difficulty("easy")
    def test_a_star_basic():
        # Language: a*
        grammar = {
            "start": "S",
            "rules": {
                "S": ["aS", ""],  # S -> a S | ε
            },
        }
        from src.target_parser import accepts
    
        # Positive cases
        assert accepts(grammar, "") is True
>       assert accepts(grammar, "a") is True
E       AssertionError: assert False is True
E        +  where False = <function accepts at 0x10785f560>({'rules': {'S': ['aS', '']}, 'start': 'S'}, 'a')

tests/test_parser_easy.py:36: AssertionError
______________________________ test_ab_star_basic ______________________________

    @pytest.mark.difficulty("easy")
    def test_ab_star_basic():
        # Language: (ab)*
        grammar = {
            "start": "S",
            "rules": {
                "S": ["abS", ""],  # S -> ab S | ε
            },
        }
        from src.target_parser import accepts
    
        # Positive cases
        assert accepts(grammar, "") is True
>       assert accepts(grammar, "ab") is True
E       AssertionError: assert False is True
E        +  where False = <function accepts at 0x10785f560>({'rules': {'S': ['abS', '']}, 'start': 'S'}, 'ab')

tests/test_parser_easy.py:59: AssertionError
______________________ test_balanced_parentheses_shallow _______________________

    @pytest.mark.difficulty("easy")
    def test_balanced_parentheses_shallow():
        # Language: Balanced parentheses with shallow depth
        # Grammar: S -> ( S ) S | ε
        grammar = {
            "start": "S",
            "rules": {
                "S": ["(S)S", ""],
            },
        }
        from src.target_parser import accepts
    
        # Positive cases (depth up to 3 pairs)
        for s in [
            "",
            "()",
            "()()",
            "(())",
            "(()())",
            "((()))",
        ]:
>           assert accepts(grammar, s) is True, f"Expected True for {s!r}"
E           AssertionError: Expected True for '()'
E           assert False is True
E            +  where False = <function accepts at 0x10785f560>({'rules': {'S': ['(S)S', '']}, 'start': 'S'}, '()')

tests/test_parser_easy.py:91: AssertionError
=========================== short test summary info ============================
FAILED tests/test_parser_easy.py::test_a_star_basic - AssertionError: assert ...
FAILED tests/test_parser_easy.py::test_ab_star_basic - AssertionError: assert...
FAILED tests/test_parser_easy.py::test_balanced_parentheses_shallow - Asserti...

